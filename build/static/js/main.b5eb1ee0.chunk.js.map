{"version":3,"sources":["components/list.js","components/output-info.js","components/cat-view.js","components/form.js","App.js","index.js"],"names":["List","props","react_default","a","createElement","className","items","map","item","idx","key","activeIdx","onClick","onItemClick","name","OutputInfo","cats","index","clicks","length","CatView","_props$cat","cat","imgUrl","src","concat","alt","onCatClick","output_info","catIndex","Form","state","isFormShow","fields","_this","nextProps","this","setState","resetForm","el","value","parseInt","temp","onSaveForm","_this2","_this$state$fields","toggleForm","style","display","type","onChange","e","onFieldChange","target","onCancel","onSave","React","Component","App","getCurCat","curCat","data","_this3","list","setCatIndex","cat_view","Object","assign","updateClicks","components_form","updateCat","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b5eb1ee0.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n// 猫的列表\nfunction List(props) {\n  return (\n    <ul className=\"list\">\n      {props.items && props.items.map((item, idx) => (\n        <li key={idx}\n          className={props.activeIdx === idx ? 'active' : ''}\n          onClick={() => props.onItemClick(idx)}\n        >{item.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nList.propTypes = {\n  items: PropTypes.array,\n  activeIdx: PropTypes.number,\n  onItemClick: PropTypes.func\n}\n\nexport default List;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction OutputInfo(props) {\n  let { cats, index, clicks } = props;\n\n  return (\n    <p>\n      共 {cats.length} 只猫咪，当前为第 {index + 1} 只，被点击了 {clicks} 次\n    </p>\n  )\n}\n\nOutputInfo.propTypes = {\n  cats: PropTypes.array,\n  index: PropTypes.number,\n  clicks: PropTypes.number\n}\n\nexport default OutputInfo;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport OutputInfo from './output-info'\n\nfunction CatView(props) {\n  let { name, clicks, imgUrl } = props.cat;\n\n  return (\n    <div className=\"cat-view\">\n      <p>\n        {/* 猫的名称和点击数 */}\n        <strong>{name}</strong>{' '}\n        <span className=\"cat-clicks\">{clicks}</span> clicks\n      </p>\n\n      {/* 猫的照片，注：标签必须正常闭合 */}\n      <img src={`images/${imgUrl}`} alt={name}\n        onClick={() => props.onCatClick()}\n      />\n\n      {/* 从父级获取需要的参数 */}\n      <OutputInfo\n        cats={props.cats}\n        index={props.catIndex}\n        clicks={props.cat.clicks}\n      />\n    </div>\n  )\n}\n\nCatView.propTypes = {\n  cat: PropTypes.shape({\n    name: PropTypes.string,\n    clicks: PropTypes.number,\n    imgUrl: PropTypes.string\n  }),\n  onCatClick: PropTypes.func,\n\n  cats: PropTypes.array,\n  catIndex: PropTypes.number\n}\n\nexport default CatView;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Form extends React.Component {\n  // 内部的状态，对主业务逻辑无影响\n  state = {\n    isFormShow: false,\n    fields: this.props.fields\n  }\n\n  // 生命周期：接收到新 props\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.fields !== this.state.fields) {\n      this.setState({fields: nextProps.fields})\n    }\n  }\n\n  // 切换表单可见\n  toggleForm() {\n    this.resetForm()\n    this.setState(state => (\n      {isFormShow: !state.isFormShow}\n    ))\n  }\n\n  // 表单项 value 变化\n  onFieldChange(el) {\n    let value = el.value;\n    let name = el.name;\n\n    if (name === 'clicks') {\n      value = parseInt(value, 10)\n    }\n\n    this.setState(state => {\n      let temp = {};\n\n      for (let key in state.fields) {\n        temp[key] = key === name ? value : state.fields[key]\n      }\n\n      return { fields: temp }\n    })\n  }\n\n  // 还原表单赋值\n  resetForm() {\n    this.setState({fields: this.props.fields})\n  }\n\n  // 取消\n  onCancel() {\n    this.resetForm()\n    this.setState({isFormShow: false})\n  }\n\n  // 保存\n  onSave() {\n    // 传递表单值（组件 state.fields 的值）\n    this.props.onSaveForm(this.state.fields)\n  }\n\n  render() {\n    let { name, clicks, imgUrl } = this.state.fields;\n\n    return (\n      <div>\n        <p>\n          <button\n            className=\"btn-admin\"\n            onClick={() => this.toggleForm()}\n          >Admin</button>\n        </p>\n        <div className=\"form\" style={\n            {display: this.state.isFormShow ? 'block' : 'none'}\n          }>\n          <p>\n            {/* 受控表单 */}\n            <label>Name:</label>\n            <input type=\"text\" name=\"name\"\n              value={name}\n              // 不加 onChange 的话，文本框是只读的\n              onChange={e => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p>\n            <label>ImgURL:</label>\n            <input type=\"text\" name=\"imgUrl\"\n              value={`images/${imgUrl}`}\n              onChange={(e) => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p>\n            <label>Clicks:</label>\n            <input type=\"text\" name=\"clicks\"\n              value={clicks}\n              onChange={(e) => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p className=\"btn-group\">\n            <button onClick={() => this.onCancel()}>Cancel</button>{' '}\n            <button onClick={() => this.onSave()}>Save</button>\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nForm.propTypes = {\n  fields: PropTypes.shape({\n    name: PropTypes.string,\n    clicks: PropTypes.number,\n    imgUrl: PropTypes.string\n  }),\n  onSaveForm: PropTypes.func\n}\n\nexport default Form;\n","import React from 'react'\nimport List from './components/list'\nimport CatView from './components/cat-view'\nimport Form from './components/form'\n\nimport './App.css'\n\n// 定义根组件\nclass App extends React.Component {\n  // 根级数据（下发给子组件）\n  // 数据只能单向下发，或者组件内部自行消化\n  state = {\n    cats: [\n      {\n        name: 'Sweet',\n        imgUrl: 'cat_picture1.jpg',\n        clicks: 0\n      }, {\n        name: 'Tough',\n        imgUrl: 'cat_picture2.jpeg',\n        clicks: 0\n      }, {\n        name: 'Yummy',\n        imgUrl: 'cat_picture3.jpeg',\n        clicks: 0\n      }, {\n        name: 'Ghost',\n        imgUrl: 'cat_picture4.jpeg',\n        clicks: 0\n      }, {\n        name: 'Flora',\n        imgUrl: 'cat_picture5.jpeg',\n        clicks: 0\n      }\n    ],\n    catIndex: 0\n  }\n\n  // 父组件提前声明好函数或方法作为契约\n  // 描述自己的 state 将如何变\n  setCatIndex(idx) {\n    this.setState({catIndex: idx})\n  }\n\n  // 获取当前的猫\n  getCurCat = () => this.state.cats[this.state.catIndex]\n\n  // 更新点击数\n  updateClicks() {\n    let curCat = this.getCurCat();\n\n    // 不要使用 this.state.cat 去获取上一次的 state\n    // 而是通过 setState 回调函数的参数值去获取\n    this.setState(state => (\n      {\n        cats: state.cats.map(cat => {\n          if (curCat === cat) {\n            cat.clicks++\n          }\n\n          return cat\n        })\n      }\n    ))\n  }\n\n  // 更新当前的猫\n  updateCat(data) {\n    this.setState(state => ({\n      cats: state.cats.map((cat, idx) => idx === this.state.catIndex ? data : cat)\n    }))\n  }\n\n  // 视图渲染函数\n  render() {\n    return (\n      // 注：class 类名属性要写成 className\n      <div className=\"App\">\n        {/* 猫的列表 */}\n        <List\n          items={this.state.cats}\n          activeIdx={this.state.catIndex}\n          // 子组件通过触发父组件声明好的回调来更新父组件 state\n          onItemClick={(idx) => this.setCatIndex(idx)}\n        />\n\n        {/* 猫的详情 */}\n        <CatView\n          // 将顶级 state 传递下去，孙组件会用到\n          {...this.state}\n\n          cat={this.getCurCat()}\n          onCatClick={() => this.updateClicks()}\n        />\n\n        {/* 表单 */}\n        <Form\n          fields={this.getCurCat()}\n          onSaveForm={(data) => this.updateCat(data)}\n        />\n      </div>\n    )\n  }\n}\n\n// 向外导出接口\nexport default App;\n","import React from 'react'  // 解析、编译器\nimport ReactDOM from 'react-dom'  // 渲染到 DOM 的库\nimport App from './App'  // 根组件\nimport './index.css'  // 样式文件\n\n// 渲染到 DOM 中\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}