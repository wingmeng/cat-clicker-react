{"version":3,"sources":["components/list.js","components/cat-view.js","components/form.js","App.js","index.js"],"names":["List","props","react_default","a","createElement","className","items","map","item","idx","key","activeIdx","onClick","onItemClick","name","CatView","_props$cat","cat","clicks","imgUrl","src","concat","alt","onCatClick","Form","state","isFormShow","fields","_this","nextProps","this","setState","resetForm","el","value","parseInt","temp","onSaveForm","_this2","_this$state$fields","toggleForm","style","display","type","onChange","e","onFieldChange","target","onCancel","onSave","React","Component","App","cats","catIndex","getCurCat","curCat","data","_this3","list","setCatIndex","cat_view","updateClicks","components_form","updateCat","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.903b4937.chunk.js","sourcesContent":["import React from 'react'\n\n// 猫的列表\nfunction List(props) {\n  return (\n    <ul className=\"list\">\n      {props.items && props.items.map((item, idx) => (\n        <li key={idx}\n          className={props.activeIdx === idx ? 'active' : ''}\n          onClick={() => props.onItemClick(idx)}\n        >{item.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default List;\n","import React from 'react'\n\nfunction CatView(props) {\n  let { name, clicks, imgUrl } = props.cat;\n\n  return (\n    <div className=\"cat-view\">\n      <p>\n        {/* 猫的名称和点击数 */}\n        <strong>{name}</strong>\n        <span className=\"cat-clicks\">{clicks}</span> clicks\n      </p>\n\n      {/* 猫的照片，注：标签必须正常闭合 */}\n      <img src={`images/${imgUrl}`} alt={name}\n        onClick={() => props.onCatClick()}\n      />\n    </div>\n  )\n}\n\nexport default CatView;\n","import React from 'react'\n\nclass Form extends React.Component {\n  // 内部的状态，对主业务逻辑无影响\n  state = {\n    isFormShow: false,\n    fields: this.props.fields\n  }\n\n  // 生命周期：接收到新 props\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.fields !== this.state.fields) {\n      this.setState({fields: nextProps.fields})\n    }\n  }\n\n  // 切换表单可见\n  toggleForm() {\n    this.resetForm()\n    this.setState(state => (\n      {isFormShow: !state.isFormShow}\n    ))\n  }\n\n  // 表单项 value 变化\n  onFieldChange(el) {\n    let value = el.value;\n    let name = el.name;\n\n    if (name === 'clicks') {\n      value = parseInt(value, 10)\n    }\n\n    this.setState(state => {\n      let temp = {};\n\n      for (let key in state.fields) {\n        temp[key] = key === name ? value : state.fields[key]\n      }\n\n      return { fields: temp }\n    })\n  }\n\n  // 还原表单赋值\n  resetForm() {\n    this.setState({fields: this.props.fields})\n  }\n\n  // 取消\n  onCancel() {\n    this.resetForm()\n    this.setState({isFormShow: false})\n  }\n\n  // 保存\n  onSave() {\n    // 传递表单值（组件 state.fields 的值）\n    this.props.onSaveForm(this.state.fields)\n  }\n\n  render() {\n    let { name, clicks, imgUrl } = this.state.fields;\n\n    return (\n      <div>\n        <p>\n          <button onClick={() => this.toggleForm()}>Admin</button>\n        </p>\n        <div style={\n            {display: this.state.isFormShow ? 'block' : 'none'}\n          }>\n          <p>\n            {/* 受控表单 */}\n            Name:\n            <input type=\"text\" name=\"name\"\n              value={name}\n              // 不加 onChange 的话，文本框是只读的\n              onChange={e => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p>\n            Photo Url:\n            <input type=\"text\" name=\"imgUrl\"\n              value={`images/${imgUrl}`}\n              onChange={(e) => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p>\n            Clicks:\n            <input type=\"text\" name=\"clicks\"\n              value={clicks}\n              onChange={(e) => this.onFieldChange(e.target)}\n            />\n          </p>\n          <p>\n            <button onClick={() => this.onCancel()}>取消</button>\n            <button onClick={() => this.onSave()}>保存</button>\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Form;\n","import React from 'react'\nimport List from './components/list'\nimport CatView from './components/cat-view'\nimport Form from './components/form'\n\nimport './App.css'\n\n// 定义根组件\nclass App extends React.Component {\n  // 根级数据（下发给子组件）\n  // 数据只能单向下发，或者组件内部自行消化\n  state = {\n    cats: [\n      {\n        name: 'Sweet',\n        imgUrl: 'cat_picture1.jpg',\n        clicks: 0\n      }, {\n        name: 'Tough',\n        imgUrl: 'cat_picture2.jpeg',\n        clicks: 0\n      }, {\n        name: 'Yummy',\n        imgUrl: 'cat_picture3.jpeg',\n        clicks: 0\n      }, {\n        name: 'Ghost',\n        imgUrl: 'cat_picture4.jpeg',\n        clicks: 0\n      }, {\n        name: 'Flora',\n        imgUrl: 'cat_picture5.jpeg',\n        clicks: 0\n      }\n    ],\n    catIndex: 0\n  }\n\n  // 父组件提前声明好函数或方法作为契约\n  // 描述自己的 state 将如何变\n  setCatIndex(idx) {\n    this.setState({catIndex: idx})\n  }\n\n  // 获取当前的猫\n  getCurCat = () => this.state.cats[this.state.catIndex]\n\n  // 更新点击数\n  updateClicks() {\n    let curCat = this.getCurCat();\n\n    // 不要使用 this.state.cat 去获取上一次的 state\n    // 而是通过 setState 回调函数的参数值去获取\n    this.setState(state => (\n      {\n        cats: state.cats.map(cat => {\n          if (curCat === cat) {\n            cat.clicks++\n          }\n\n          return cat\n        })\n      }\n    ))\n  }\n\n  // 更新当前的猫\n  updateCat(data) {\n    this.setState(state => ({\n      cats: state.cats.map((cat, idx) => idx === this.state.catIndex ? data : cat)\n    }))\n  }\n\n  // 视图渲染函数\n  render() {\n    return (\n      // 注：class 类名属性要写成 className\n      <div className=\"App\">\n        {/* 猫的列表 */}\n        <List\n          items={this.state.cats}\n          activeIdx={this.state.catIndex}\n          // 子组件通过触发父组件声明好的回调来更新父组件 state\n          onItemClick={(idx) => this.setCatIndex(idx)}\n        />\n\n        {/* 猫的详情 */}\n        <CatView\n          cat={this.getCurCat()}\n          onCatClick={() => this.updateClicks()}\n        />\n\n        {/* 表单 */}\n        <Form\n          fields={this.getCurCat()}\n          onSaveForm={(data) => this.updateCat(data)}\n        />\n      </div>\n    )\n  }\n}\n\n// 向外导出接口\nexport default App;\n","import React from 'react'  // 解析、编译器\nimport ReactDOM from 'react-dom'  // 渲染到 DOM 的库\nimport './index.css'  // 样式文件\nimport App from './App'  // 根组件\n\n// 渲染到 DOM 中\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}